services:
  minio:
    image: minio/minio:latest
    container_name: minio-feature-store
    restart: unless-stopped
    ports:
      - "9100:9000"  # API
      - "9101:9001"  # Console Web
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_CONSOLE_ADDRESS: ":9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio-storage:/data
    networks:
      - mlflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-mc:
    image: minio/mc:latest
    container_name: minio-client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: |
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set local http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb local/store-item-demand-forecasting --ignore-existing;
      /usr/bin/mc mb local/mlflow-artifacts --ignore-existing;
      exit 0;
      "
    networks:
      - mlflow-network

  postgres:
    image: postgres:13
    container_name: db-mlflow
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
      POSTGRES_DB: mlflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow -d mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mlflow-network

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow-server
    ports:
      - "5000:5000"
    command: >
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow
      --default-artifact-root s3://mlflow-artifacts
      --serve-artifacts
      --host 0.0.0.0
    environment:
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_S3_ENDPOINT_URL: http://minio:9000
      AWS_DEFAULT_REGION: us-east-1
      AWS_S3_ADDRESSING_STYLE: path
      MLFLOW_DISABLE_REQUEST_LOGGING: "true"
      MLFLOW_TRACKING_INSECURE_TLS: "true"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - mlflow-network

volumes:
  minio-storage:
    driver: local
  postgres_data:
    driver: local

networks:
  mlflow-network:
    driver: bridge